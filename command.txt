[ yum/dnf/rpm ]
yum update  # update all installed packages on a system to their latest available versions from the configured repositories
yum install <package>   # installs the package if available in repository
yum remove <remove>     # removes the package from the system
yum upgrade <package>   # upgrades a package with no rollback available
yum update <package>    # updates a package which can be rollbacked
yum check-update    # To check the available updates for packages
yum history     # view the transaction history of package installs, updates, removals, and more that were performed using yum
yum history undo <ID>   # undo a specific transaction
yum history redo <ID>   # redo a specific transaction
yum -options    # Can see what options we can use using yum
yum install --nodeps <package>  # installs package without depedency
yum makecache   # download and cache the metadata of enabled YUM repositories and stores it in local cache usually in /var/cache/yum
yum clean all   # to remove all cached data that YUM uses for package management on RHEL-based systems
dnf list available  # list the available packages in repositories
dnf list installed  # list the packages intalled in the server
dnf info <package>  # gives information about the package
dnf search <package>    # used to search for packages in the enabled repositories
rpm -ivh <package>  # installs a package
rpm -evh <package>  # erases a package
rpm -U <package>    # Updates a package
rpm -qa     # Lists all the packages that has been installed
rpm -qi <package>   # gives the detailed information about the package
rpm -qc <package>   # gives the info about the config files of the package
needs-restarting -r     # Tells if system reboot is required after updation of packages(yum-utils package required to run the command)

[ ssh-keygen ]
ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -C "<email ID>"      # Generate a New SSH Key Pair (Default RSA)
ssh-copy-id user@remote-server      # Copy SSH Key to a Remote Server (for Passwordless Login)

[ firewall-cmd ]
firewall-cmd --state    # checks firewall status
firewall-cmd --list-all     #lists all active firewall rules
firewall-cmd --permanent --add-port=80/tcp      #Allow a Specific Port (e.g., HTTP - Port 80)
firewall-cmd --reload       #Reloads and updates the changes made in firewall setting
firewall-cmd --permanent --remove-port=80/tcp       #Remove a Specific Port
firewall-cmd --permanent --add-service=ssh      #Allow a Specific Service (e.g., SSH)
firewall-cmd --permanent --remove-service=ssh       #Remove a Specific Service
firewall-cmd --get-services     #List Available Services
firewall-cmd --permanent --add-source=192.168.1.100     #Allow a Specific IP Address
firewall-cmd --permanent --add-rich-rule='rule family="ipv4" source address="192.168.1.200" reject'     #Block a Specific IP Address
firewall-cmd --set-log-denied=all       #Enable Logging for Dropped Packets

[ git ]
git clone <http or ssh url of the repository>       # Will clone the repository to current working pathS
git add .       # used in Git to stage all changes in the current directory (and its subdirectories) for the next commit
git commit -m "commit message"      # used in Git to create a commit with a specific message. A commit represents a snapshot of the changes staged in your repository
git push origin main    #used to upload (push) local commits from your main branch to a remote repository (origin)
git fetch origin    # Retrieves the latest updates from the remote but doesn't merge them
git reset --hard origin/main        # Forces your local branch to match the remote main branch (overwrites local changes)

[ vagrant ]
vagrant init    # creates a Vagrantfile in the current working directory
vagrant init ubuntu/jammy64     # creates a Vagrantfile with Ubuntu 22.04 LTS as the base OS
vagrant up      # starts the VM using the provider (default is VirtualBox)
vagrant ssh     # Logs into the running VM
vagrant suspend   # Pause the VM (saves state)
vagrant halt      # Shut down the VM
vagrant destroy   # Completely remove the VM